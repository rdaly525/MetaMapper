{"top":"global.WrappedALU",
"namespaces":{
  "commonlib":{
    "generators":{
      "MAD":{
        "typegen":"coreir.ternary",
        "genparams":{"width":"Int"}
      },
      "abs":{
        "typegen":"coreir.unary",
        "genparams":{"width":"Int"},
        "modules":[
          [{"width":["Int",16]},{
            "type":["Record",[
              ["in",["Array",16,"BitIn"]],
              ["out",["Array",16,"Bit"]]
            ]],
            "instances":{
              "is_pos":{
                "genref":"coreir.sge",
                "genargs":{"width":["Int",16]}
              },
              "mult":{
                "genref":"coreir.mul",
                "genargs":{"width":["Int",16]}
              },
              "negone_const":{
                "genref":"coreir.const",
                "genargs":{"width":["Int",16]},
                "modargs":{"value":[["BitVector",16],"16'hffff"]}
              },
              "out_mux":{
                "genref":"coreir.mux",
                "genargs":{"width":["Int",16]}
              },
              "zero_const":{
                "genref":"coreir.const",
                "genargs":{"width":["Int",16]},
                "modargs":{"value":[["BitVector",16],"16'h0000"]}
              }
            },
            "connections":[
              ["self.in","is_pos.in0"],
              ["zero_const.out","is_pos.in1"],
              ["out_mux.sel","is_pos.out"],
              ["negone_const.out","mult.in0"],
              ["self.in","mult.in1"],
              ["out_mux.in0","mult.out"],
              ["self.in","out_mux.in1"],
              ["self.out","out_mux.out"]
            ]
          }]
        ]
      },
      "absd":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"}
      },
      "accumulation_register":{
        "typegen":"commonlib.accumulation_register_type",
        "genparams":{"iterations":"Int", "width":"Int"}
      },
      "bitopn":{
        "typegen":"commonlib.bitopN_type",
        "genparams":{"N":"Int", "operator":"String"}
      },
      "const_array":{
        "typegen":"coreir.constArrayTG",
        "genparams":{"type":"CoreIRType", "value":"Int"},
        "defaultgenargs":{"value":["Int",0]}
      },
      "counter":{
        "typegen":"commonlib.counter_type",
        "genparams":{"inc":"Int", "max":"Int", "min":"Int", "width":"Int"}
      },
      "deserializer":{
        "typegen":"commonlib.deserializer_type",
        "genparams":{"rate":"Int", "width":"Int"}
      },
      "div":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"}
      },
      "lutN":{
        "typegen":"commonlib.lutNType",
        "genparams":{"N":"Int"},
        "metadata":{"verilog":{"definition":"  assign out = init[in];","interface":["input [N-1:0] in","output out"],"parameters":["init"]}}
      },
      "muxn":{
        "typegen":"commonlib.muxN_type",
        "genparams":{"N":"Int", "width":"Int"},
        "modules":[
          [{"N":["Int",2], "width":["Int",16]},{
            "type":["Record",[
              ["in",["Record",[["data",["Array",2,["Array",16,"BitIn"]]],["sel",["Array",1,"BitIn"]]]]],
              ["out",["Array",16,"Bit"]]
            ]]
          }]
        ]
      },
      "opn":{
        "typegen":"commonlib.opN_type",
        "genparams":{"N":"Int", "operator":"String", "width":"Int"}
      },
      "reg_array":{
        "typegen":"coreir.regArrayTG",
        "genparams":{"has_clr":"Bool", "has_en":"Bool", "has_rst":"Bool", "init":"Int", "type":"CoreIRType"},
        "defaultgenargs":{"has_clr":["Bool",false], "has_en":["Bool",false], "has_rst":["Bool",false], "init":["Int",0]}
      },
      "reshape":{
        "typegen":"commonlib.reshape_type",
        "genparams":{"input_type":"CoreIRType", "output_type":"CoreIRType"}
      },
      "sclamp":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"}
      },
      "serializer":{
        "typegen":"commonlib.serializer_type",
        "genparams":{"rate":"Int", "width":"Int"}
      },
      "smax":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"},
        "modules":[
          [{"width":["Int",16]},{
            "type":["Record",[
              ["in0",["Array",16,"BitIn"]],
              ["in1",["Array",16,"BitIn"]],
              ["out",["Array",16,"Bit"]]
            ]],
            "instances":{
              "max_mux":{
                "genref":"coreir.mux",
                "genargs":{"width":["Int",16]}
              },
              "scomp":{
                "genref":"coreir.sge",
                "genargs":{"width":["Int",16]}
              }
            },
            "connections":[
              ["self.in1","max_mux.in0"],
              ["self.in0","max_mux.in1"],
              ["self.out","max_mux.out"],
              ["scomp.out","max_mux.sel"],
              ["self.in0","scomp.in0"],
              ["self.in1","scomp.in1"]
            ]
          }]
        ]
      },
      "smin":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"},
        "modules":[
          [{"width":["Int",16]},{
            "type":["Record",[
              ["in0",["Array",16,"BitIn"]],
              ["in1",["Array",16,"BitIn"]],
              ["out",["Array",16,"Bit"]]
            ]],
            "instances":{
              "min_mux":{
                "genref":"coreir.mux",
                "genargs":{"width":["Int",16]}
              },
              "scomp":{
                "genref":"coreir.sle",
                "genargs":{"width":["Int",16]}
              }
            },
            "connections":[
              ["self.in1","min_mux.in0"],
              ["self.in0","min_mux.in1"],
              ["self.out","min_mux.out"],
              ["scomp.out","min_mux.sel"],
              ["self.in0","scomp.in0"],
              ["self.in1","scomp.in1"]
            ]
          }]
        ]
      },
      "transpose":{
        "typegen":"commonlib.transpose_type",
        "genparams":{"input_type":"CoreIRType"}
      },
      "transpose_reshape":{
        "typegen":"commonlib.reshape_type",
        "genparams":{"input_type":"CoreIRType", "output_type":"CoreIRType"}
      },
      "uclamp":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"}
      },
      "umax":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"},
        "modules":[
          [{"width":["Int",16]},{
            "type":["Record",[
              ["in0",["Array",16,"BitIn"]],
              ["in1",["Array",16,"BitIn"]],
              ["out",["Array",16,"Bit"]]
            ]],
            "instances":{
              "max_mux":{
                "genref":"coreir.mux",
                "genargs":{"width":["Int",16]}
              },
              "ucomp":{
                "genref":"coreir.uge",
                "genargs":{"width":["Int",16]}
              }
            },
            "connections":[
              ["self.in1","max_mux.in0"],
              ["self.in0","max_mux.in1"],
              ["self.out","max_mux.out"],
              ["ucomp.out","max_mux.sel"],
              ["ucomp.in0","self.in0"],
              ["ucomp.in1","self.in1"]
            ]
          }]
        ]
      },
      "umin":{
        "typegen":"coreir.binary",
        "genparams":{"width":"Int"},
        "modules":[
          [{"width":["Int",16]},{
            "type":["Record",[
              ["in0",["Array",16,"BitIn"]],
              ["in1",["Array",16,"BitIn"]],
              ["out",["Array",16,"Bit"]]
            ]],
            "instances":{
              "min_mux":{
                "genref":"coreir.mux",
                "genargs":{"width":["Int",16]}
              },
              "ucomp":{
                "genref":"coreir.ule",
                "genargs":{"width":["Int",16]}
              }
            },
            "connections":[
              ["self.in1","min_mux.in0"],
              ["self.in0","min_mux.in1"],
              ["self.out","min_mux.out"],
              ["ucomp.out","min_mux.sel"],
              ["ucomp.in0","self.in0"],
              ["ucomp.in1","self.in1"]
            ]
          }]
        ]
      }
    },
    "typegens":{
      "accumulation_register_type":[{"iterations":"Int", "width":"Int"},"implicit"],
      "bitopN_type":[{"N":"Int", "operator":"String"},"implicit"],
      "counter_type":[{"inc":"Int", "max":"Int", "min":"Int", "width":"Int"},"implicit"],
      "deserializer_type":[{"rate":"Int", "width":"Int"},"implicit"],
      "lutNType":[{"N":"Int"},"implicit"],
      "muxN_type":[{"N":"Int", "width":"Int"},"sparse",[
        [{"N":["Int",2], "width":["Int",16]},["Record",[["in",["Record",[["data",["Array",2,["Array",16,"BitIn"]]],["sel",["Array",1,"BitIn"]]]]],["out",["Array",16,"Bit"]]]]]
      ]],
      "opN_type":[{"N":"Int", "operator":"String", "width":"Int"},"implicit"],
      "reshape_type":[{"input_type":"CoreIRType", "output_type":"CoreIRType"},"implicit"],
      "serializer_type":[{"rate":"Int", "width":"Int"},"implicit"],
      "transpose_type":[{"input_type":"CoreIRType"},"implicit"]
    }
  },
  "global":{
    "modules":{
      "ALU":{
        "type":["Record",[
          ["inst",["Array",19,"BitIn"]],
          ["a",["Array",16,"BitIn"]],
          ["b",["Array",16,"BitIn"]],
          ["CLK",["Named","coreir.clkIn"]],
          ["ASYNCRESET",["Named","coreir.arstIn"]],
          ["O",["Array",16,"Bit"]]
        ]],
        "instances":{
          "ALU_comb_inst0":{
            "modref":"global.ALU_comb"
          }
        },
        "connections":[
          ["self.O","ALU_comb_inst0.O"],
          ["self.a","ALU_comb_inst0.a"],
          ["self.b","ALU_comb_inst0.b"],
          ["self.inst","ALU_comb_inst0.inst"]
        ]
      },
      "ALU_comb":{
        "type":["Record",[
          ["inst",["Array",19,"BitIn"]],
          ["a",["Array",16,"BitIn"]],
          ["b",["Array",16,"BitIn"]],
          ["O",["Array",16,"Bit"]]
        ]],
        "instances":{
          "Mux2xOutSInt16_inst0":{
            "modref":"global.Mux2xOutSInt16"
          },
          "Mux2xOutSInt16_inst1":{
            "modref":"global.Mux2xOutSInt16"
          },
          "Mux2xOutSInt16_inst2":{
            "modref":"global.Mux2xOutSInt16"
          },
          "Mux2xOutSInt16_inst3":{
            "modref":"global.Mux2xOutSInt16"
          },
          "Mux2xOutSInt16_inst4":{
            "modref":"global.Mux2xOutSInt16"
          },
          "const_1_3":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",3]},
            "modargs":{"value":[["BitVector",3],"3'h1"]}
          },
          "const_2_3":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",3]},
            "modargs":{"value":[["BitVector",3],"3'h2"]}
          },
          "const_3_3":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",3]},
            "modargs":{"value":[["BitVector",3],"3'h3"]}
          },
          "const_4_3":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",3]},
            "modargs":{"value":[["BitVector",3],"3'h4"]}
          },
          "const_5_3":{
            "genref":"coreir.const",
            "genargs":{"width":["Int",3]},
            "modargs":{"value":[["BitVector",3],"3'h5"]}
          },
          "magma_Bits_16_add_inst0":{
            "genref":"coreir.add",
            "genargs":{"width":["Int",16]}
          },
          "magma_Bits_16_and_inst0":{
            "genref":"coreir.and",
            "genargs":{"width":["Int",16]}
          },
          "magma_Bits_16_or_inst0":{
            "genref":"coreir.or",
            "genargs":{"width":["Int",16]}
          },
          "magma_Bits_16_sub_inst0":{
            "genref":"coreir.sub",
            "genargs":{"width":["Int",16]}
          },
          "magma_Bits_16_xor_inst0":{
            "genref":"coreir.xor",
            "genargs":{"width":["Int",16]}
          },
          "magma_Bits_3_eq_inst0":{
            "genref":"coreir.eq",
            "genargs":{"width":["Int",3]}
          },
          "magma_Bits_3_eq_inst1":{
            "genref":"coreir.eq",
            "genargs":{"width":["Int",3]}
          },
          "magma_Bits_3_eq_inst2":{
            "genref":"coreir.eq",
            "genargs":{"width":["Int",3]}
          },
          "magma_Bits_3_eq_inst3":{
            "genref":"coreir.eq",
            "genargs":{"width":["Int",3]}
          },
          "magma_Bits_3_eq_inst4":{
            "genref":"coreir.eq",
            "genargs":{"width":["Int",3]}
          }
        },
        "connections":[
          ["magma_Bits_16_xor_inst0.out","Mux2xOutSInt16_inst0.I0"],
          ["magma_Bits_16_or_inst0.out","Mux2xOutSInt16_inst0.I1"],
          ["Mux2xOutSInt16_inst1.I0","Mux2xOutSInt16_inst0.O"],
          ["magma_Bits_3_eq_inst0.out","Mux2xOutSInt16_inst0.S"],
          ["magma_Bits_16_and_inst0.out","Mux2xOutSInt16_inst1.I1"],
          ["Mux2xOutSInt16_inst2.I0","Mux2xOutSInt16_inst1.O"],
          ["magma_Bits_3_eq_inst1.out","Mux2xOutSInt16_inst1.S"],
          ["magma_Bits_16_sub_inst0.out","Mux2xOutSInt16_inst2.I1"],
          ["Mux2xOutSInt16_inst3.I0","Mux2xOutSInt16_inst2.O"],
          ["magma_Bits_3_eq_inst2.out","Mux2xOutSInt16_inst2.S"],
          ["magma_Bits_16_add_inst0.out","Mux2xOutSInt16_inst3.I1"],
          ["Mux2xOutSInt16_inst4.I0","Mux2xOutSInt16_inst3.O"],
          ["magma_Bits_3_eq_inst3.out","Mux2xOutSInt16_inst3.S"],
          ["self.inst.3:19","Mux2xOutSInt16_inst4.I1.0:16"],
          ["self.O","Mux2xOutSInt16_inst4.O"],
          ["magma_Bits_3_eq_inst4.out","Mux2xOutSInt16_inst4.S"],
          ["magma_Bits_3_eq_inst4.in1","const_1_3.out"],
          ["magma_Bits_3_eq_inst3.in1","const_2_3.out"],
          ["magma_Bits_3_eq_inst2.in1","const_3_3.out"],
          ["magma_Bits_3_eq_inst0.in1","const_4_3.out"],
          ["magma_Bits_3_eq_inst1.in1","const_5_3.out"],
          ["self.a","magma_Bits_16_add_inst0.in0"],
          ["self.b","magma_Bits_16_add_inst0.in1"],
          ["self.a","magma_Bits_16_and_inst0.in0"],
          ["self.b","magma_Bits_16_and_inst0.in1"],
          ["self.a","magma_Bits_16_or_inst0.in0"],
          ["self.b","magma_Bits_16_or_inst0.in1"],
          ["self.a","magma_Bits_16_sub_inst0.in0"],
          ["self.b","magma_Bits_16_sub_inst0.in1"],
          ["self.a","magma_Bits_16_xor_inst0.in0"],
          ["self.b","magma_Bits_16_xor_inst0.in1"],
          ["self.inst.0:3","magma_Bits_3_eq_inst0.in0.0:3"],
          ["self.inst.0:3","magma_Bits_3_eq_inst1.in0.0:3"],
          ["self.inst.0:3","magma_Bits_3_eq_inst2.in0.0:3"],
          ["self.inst.0:3","magma_Bits_3_eq_inst3.in0.0:3"],
          ["self.inst.0:3","magma_Bits_3_eq_inst4.in0.0:3"]
        ]
      },
      "Mux2xOutSInt16":{
        "type":["Record",[
          ["I0",["Array",16,"BitIn"]],
          ["I1",["Array",16,"BitIn"]],
          ["S","BitIn"],
          ["O",["Array",16,"Bit"]]
        ]],
        "instances":{
          "coreir_commonlib_mux2x16_inst0":{
            "genref":"commonlib.muxn",
            "genargs":{"N":["Int",2], "width":["Int",16]}
          }
        },
        "connections":[
          ["self.I0","coreir_commonlib_mux2x16_inst0.in.data.0"],
          ["self.I1","coreir_commonlib_mux2x16_inst0.in.data.1"],
          ["self.S","coreir_commonlib_mux2x16_inst0.in.sel.0"],
          ["self.O","coreir_commonlib_mux2x16_inst0.out"]
        ]
      },
      "WrappedALU":{
        "type":["Record",[
          ["inst",["Array",19,"BitIn"]],
          ["a",["Array",16,"BitIn"]],
          ["b",["Array",16,"BitIn"]],
          ["CLK",["Named","coreir.clkIn"]],
          ["ASYNCRESET",["Named","coreir.arstIn"]],
          ["O",["Array",16,"Bit"]]
        ]],
        "instances":{
          "ALU_inst0":{
            "modref":"global.ALU"
          }
        },
        "connections":[
          ["self.ASYNCRESET","ALU_inst0.ASYNCRESET"],
          ["self.CLK","ALU_inst0.CLK"],
          ["self.O","ALU_inst0.O"],
          ["self.a","ALU_inst0.a"],
          ["self.b","ALU_inst0.b"],
          ["self.inst","ALU_inst0.inst"]
        ]
      },
      "add4":{
        "type":["Record",[
          ["clk",["Named","coreir.clkIn"]],
          ["in",["Array",4,["Array",16,"BitIn"]]],
          ["out",["Array",16,"Bit"]]
        ]],
        "instances":{
          "i00":{
            "genref":"coreir.add",
            "genargs":{"width":["Int",16]}
          },
          "i01":{
            "genref":"coreir.add",
            "genargs":{"width":["Int",16]}
          },
          "i1":{
            "genref":"coreir.add",
            "genargs":{"width":["Int",16]}
          },
          "r00":{
            "genref":"coreir.reg",
            "genargs":{"width":["Int",16]},
            "modargs":{"clk_posedge":["Bool",true], "init":[["BitVector",16],"16'hxxxx"]}
          },
          "r01":{
            "genref":"coreir.reg",
            "genargs":{"width":["Int",16]},
            "modargs":{"clk_posedge":["Bool",true], "init":[["BitVector",16],"16'hxxxx"]}
          }
        },
        "connections":[
          ["self.in.0","i00.in0"],
          ["self.in.1","i00.in1"],
          ["r00.in","i00.out"],
          ["self.in.2","i01.in0"],
          ["self.in.3","i01.in1"],
          ["r01.in","i01.out"],
          ["r00.out","i1.in0"],
          ["r01.out","i1.in1"],
          ["self.out","i1.out"],
          ["self.clk","r00.clk"],
          ["self.clk","r01.clk"]
        ]
      }
    }
  },
  "mantle":{
    "generators":{
      "add":{
        "typegen":"mantle.addType",
        "genparams":{"has_cin":"Bool", "has_cout":"Bool", "width":"Int"},
        "defaultgenargs":{"has_cin":["Bool",false], "has_cout":["Bool",false]}
      },
      "counter":{
        "typegen":"mantle.counter_type",
        "genparams":{"has_en":"Bool", "has_max":"Bool", "has_srst":"Bool", "width":"Int"},
        "defaultgenargs":{"has_en":["Bool",false], "has_max":["Bool",false], "has_srst":["Bool",false]}
      },
      "reg":{
        "typegen":"mantle.regType",
        "genparams":{"has_clr":"Bool", "has_en":"Bool", "has_rst":"Bool", "width":"Int"},
        "defaultgenargs":{"has_clr":["Bool",false], "has_en":["Bool",false], "has_rst":["Bool",false]}
      },
      "regCE":{
        "typegen":"mantle.regCEType",
        "genparams":{"width":"Int"},
        "metadata":{"verilog":{"definition":"  reg [width-1:0] value;\n  always @(posedge clk) begin\n    if (ce) begin\n      value <= in;\n    end\n  end\n  assign out = value;","interface":["input [width-1:0] in","input ce","output [width-1:0] out","input clk"]}}
      },
      "regCE_arst":{
        "typegen":"mantle.regCEArstType",
        "genparams":{"width":"Int"},
        "metadata":{"verilog":{"definition":"  reg [width-1:0] value;\n  always @(posedge clk, posedge arst) begin\n    if (arst) begin\n      value <= init;\n    end\n    else if (ce) begin\n      value <= in;\n    end\n  end\n  assign out = value;","interface":["input [width-1:0] in","input ce","output [width-1:0] out","input clk","input arst"],"parameters":["init"]}}
      },
      "sub":{
        "typegen":"mantle.addType",
        "genparams":{"has_cin":"Bool", "has_cout":"Bool", "width":"Int"},
        "defaultgenargs":{"has_cin":["Bool",false], "has_cout":["Bool",false]}
      },
      "wire":{
        "typegen":"mantle.wire",
        "genparams":{"type":"CoreIRType"}
      }
    },
    "typegens":{
      "addType":[{"has_cin":"Bool", "has_cout":"Bool", "width":"Int"},"implicit"],
      "counter_type":[{"has_en":"Bool", "has_max":"Bool", "has_srst":"Bool", "width":"Int"},"implicit"],
      "regCEArstType":[{"width":"Int"},"implicit"],
      "regCEType":[{"width":"Int"},"implicit"],
      "regType":[{"has_clr":"Bool", "has_en":"Bool", "has_rst":"Bool", "width":"Int"},"implicit"],
      "wire":[{"type":"CoreIRType"},"implicit"]
    }
  },
  "memory":{
    "generators":{
      "fifo":{
        "typegen":"memory.FifoMemType",
        "genparams":{"depth":"Int", "width":"Int"},
        "defaultgenargs":{"depth":["Int",1024], "width":["Int",16]}
      },
      "ram":{
        "typegen":"memory.RamType",
        "genparams":{"depth":"Int", "width":"Int"}
      },
      "ram2":{
        "typegen":"memory.RamType2",
        "genparams":{"depth":"Int", "width":"Int"}
      },
      "rom":{
        "typegen":"memory.RomType",
        "genparams":{"depth":"Int", "width":"Int"}
      },
      "rom2":{
        "typegen":"memory.Rom2Type",
        "genparams":{"depth":"Int", "width":"Int"}
      },
      "rowbuffer":{
        "typegen":"memory.rowbufferType",
        "genparams":{"depth":"Int", "width":"Int"}
      },
      "rowbuffer_stencil_valid":{
        "typegen":"memory.rowbufferWithStencilValidType",
        "genparams":{"depth":"Int", "stencil_width":"Int", "width":"Int"}
      }
    },
    "typegens":{
      "FifoMemType":[{"depth":"Int", "width":"Int"},"implicit"],
      "RamType":[{"depth":"Int", "width":"Int"},"implicit"],
      "RamType2":[{"depth":"Int", "width":"Int"},"implicit"],
      "Rom2Type":[{"depth":"Int", "width":"Int"},"implicit"],
      "RomType":[{"depth":"Int", "width":"Int"},"implicit"],
      "rowbufferType":[{"depth":"Int", "width":"Int"},"implicit"],
      "rowbufferWithStencilValidType":[{"depth":"Int", "stencil_width":"Int", "width":"Int"},"implicit"]
    }
  }
}
}
